import math


class Derivate:
    """Функтор, рассчитывающий производную в точке любой переданной функции."""

    def __init__(self, func):
        self.__fn = func

    # При вызове класса со скобками в момент создания экземпляра запускается магический метод __call__.
    # __call__ вызывает сначала __new__, затем __init__.
    # То есть __call__ позволяет обращаться к классу как к функции.
    # Чтобы можно было вызывать экземпляр класса как функцию c(), в классе необходимо определить метод __call__.
    # Такие классы называются функторами. Функторы можно использовать вместо замыкания функций.
    def __call__(self, x, dx=0.00001, *args, **kwargs):
        return (self.__fn(x + dx) - self.__fn(x)) / dx


def sin_func(x):
    return math.sin(x)


df_sin = Derivate(sin_func)
print(df_sin(math.pi / 3))  # 0.499995669867026


@Derivate  # с помощью функторов можно создавать декораторы
def df_sin_func(x):
    return math.sin(x)


# Производная в точке.
print(df_sin_func(math.pi / 3))  # 0.499995669867026
